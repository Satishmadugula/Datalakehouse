version: "3.9"

services:
  minio:
    image: minio/minio:RELEASE.2024-05-10T02-52-55Z
    container_name: minio
    command: server /data --console-address ":9001"
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: ${MINIO_REGION}
    volumes:
      - minio-data:/data
      - ./minio/create-buckets.sh:/docker-entrypoint-initminio.d/create-buckets.sh
      - ./minio/policy.json:/etc/minio/policy.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15.5
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init-nessie.sql:/docker-entrypoint-initdb.d/init-nessie.sql
    ports:
      - "5432:5432"

  nessie:
    build:
      context: ../
      dockerfile: lakehouse/docker/nessie/Dockerfile
    image: lakehouse/nessie:0.80.1
    depends_on:
      - postgres
    environment:
      QUARKUS_DATASOURCE_USERNAME: ${POSTGRES_USER}
      QUARKUS_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
    ports:
      - "19120:19120"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19120/api/v2/config"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo:
    build:
      context: ../
      dockerfile: lakehouse/docker/mongo/Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./mongo/init:/docker-entrypoint-initdb.d

  nifi:
    build:
      context: ../
      dockerfile: lakehouse/docker/nifi/Dockerfile
    env_file:
      - ../env/nifi.env
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MONGO_URI: ${MONGO_URI}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      ENABLE_KAFKA: ${ENABLE_KAFKA}
    ports:
      - "9090:9090"
    depends_on:
      - minio
      - mongo
      - nessie

  spark:
    build:
      context: ../
      dockerfile: lakehouse/docker/spark/Dockerfile
    image: lakehouse/spark:3.5.1
    env_file:
      - ../env/spark.env
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      SPARK_LOG_LEVEL: ${SPARK_LOG_LEVEL}
      ICEBERG_NAMESPACE: ${ICEBERG_NAMESPACE}
      NESSIE_BRANCH: ${NESSIE_BRANCH}
      ENABLE_KAFKA: ${ENABLE_KAFKA}
    volumes:
      - spark-workdir:/opt/spark/work-dir
      - ../config/iceberg:/opt/config/iceberg
      - ../docker/spark/jobs:/opt/spark/jobs
      - ../docker/spark/conf:/opt/spark/conf
      - ../scripts:/opt/spark/scripts
    depends_on:
      - minio
      - nessie
      - mongo

  airflow-webserver:
    build:
      context: ../
      dockerfile: lakehouse/docker/airflow/Dockerfile
    image: lakehouse/airflow:2.9.1
    env_file:
      - ../env/airflow.env
      - ../env/.env.example
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ../docker/airflow/dags:/opt/airflow/dags/repo
      - ../airflow_contrib:/opt/airflow/airflow_contrib
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - spark
      - nifi
      - nessie
    command: ["bash", "-c", "airflow db upgrade && airflow webserver"]

  airflow-scheduler:
    image: lakehouse/airflow:2.9.1
    env_file:
      - ../env/airflow.env
      - ../env/.env.example
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ../docker/airflow/dags:/opt/airflow/dags/repo
      - ../airflow_contrib:/opt/airflow/airflow_contrib
    depends_on:
      - airflow-webserver
    command: ["bash", "-c", "airflow scheduler"]

  dremio:
    build:
      context: ../
      dockerfile: lakehouse/docker/dremio/Dockerfile
    image: lakehouse/dremio:24.3.0
    env_file:
      - ../env/dremio.env
    environment:
      DREMIO_USERNAME: ${DREMIO_ADMIN_USER}
      DREMIO_PASSWORD: ${DREMIO_ADMIN_PASSWORD}
    ports:
      - "9047:9047"
    volumes:
      - dremio-data:/opt/dremio/data
      - ../docker/dremio/bootstrap:/opt/dremio/bootstrap

  kafka:
    build:
      context: ../
      dockerfile: lakehouse/docker/kafka/Dockerfile
    env_file:
      - ../env/kafka.env
    environment:
      ENABLE_KAFKA: ${ENABLE_KAFKA}
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    profiles: ["kafka"]

  zookeeper:
    image: bitnami/zookeeper:3.8.3
    environment:
      ZOO_ENABLE_AUTH: "no"
      ZOO_SERVERS: "0.0.0.0:2888:3888"
      ZOO_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    profiles: ["kafka"]

volumes:
  minio-data:
  postgres-data:
  airflow-dags:
  airflow-logs:
  spark-workdir:
  dremio-data:
  mongo-data:

networks:
  default:
    name: lakehouse-net
